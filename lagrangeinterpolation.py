# -*- coding: utf-8 -*-
"""lagrangeInterpolation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SblUNeup3G8aNX1fH8rczJg_KW2FYMJI
"""

import numpy as np
import matplotlib.pyplot as plt

# Number of interpolation points
Ni = 50

# Create 1000 evenly spaced points between -1 and 1
x = np.linspace(-1, 1, 1000)

# Create Ni evenly spaced interpolation points between -1 and 1
xi = np.linspace(-1, 1, Ni)

# --- Runge function
#def runge(x):
#    return 1 / (1 + 25 * x**2)

#xi = np.append(xi, [0.6, 0.8, 0.9, 0.95, -0.95, -0.9, -0.8, -0.6])
#Ni = 28
#yi = runge(xi)
#y = runge(x)

# --- Polynomial function (optional, commented out)
def pol(x):
     return 5 * x**6 - 12 * x**4 + 21 * x**3 - x**2 + 1
yi = pol(xi)
y  = pol(x)

# Number of output points
No = 30
xo = np.linspace(-1, 1, No)

# Initialize the interpolation matrix A
A = np.zeros((Ni, Ni))

# Construct the interpolation matrix A
for k in range(Ni):
    temp = np.poly(xi[np.arange(Ni) != k])
    A[k, :] = temp / np.polyval(temp, xi[k])

# Compute the interpolated values
yo = np.polyval(np.dot(yi, A), xo)

# Plot the results
plt.plot(x, y, label='Runge function')
plt.plot(xi, yi, 'o', label='Interpolation points')
plt.plot(xo, yo, 'x', label='Interpolated points')
plt.legend()
plt.show()